
// Created by User on 11/29/2022.
//
#include "AVLTree.h"
#include "Utils.h"
#include <iostream>
#include <vector>
#include <algorithm>
//#include "test_maker/test_AVL_insertions_deletions.h"
//#include "test_maker/test_AVL_memory_leaks.h"


int main() {

    AVLTree<int,int> a;
    Node<int,int>* a1= a.add(1,2);
    Node<int,int>* a2= a.add(2,2);
    Node<int,int>* a3= a.add(3,2);
    assert (a.find_next_up(a2)==a3);
    Node<int,int>* a4= a.add(4,2);
    assert (a.find_next_up(a3)==a4);
    Node<int,int>* a5= a.add(5,2);
    assert (a.find_next_up(a4)==a5);
    Node<int,int>* a6= a.add(6,2);
    assert (a.find_next_up(a5)==a6);
    Node<int,int>* a7= a.add(7,2);
    assert (a.find_next_up(a6)==a7);
    Node<int,int>* a8= a.add(8,2);
    assert (a.find_next_up(a7)==a8);
    Node<int,int>* a9= a.add(9,2);
    assert (a.find_next_up(a8)==a9);
    Node<int,int>* a10= a.add(10,2);
    assert (a.find_next_up(a9)==a10);
    Node<int,int>* a11= a.add(11,2);
    assert (a.find_next_up(a10)==a11);
    Node<int,int>* a12= a.add(12,2);
    assert (a.find_next_up(a11)==a12);
    Node<int,int>* a13= a.add(13,2);
    assert (a.find_next_up(a12)==a13);
    Node<int,int>* a14= a.add(14,2);
    assert (a.find_next_up(a13)==a14);
    Node<int,int>* a15= a.add(15,2);
    assert (a.find_next_up(a14)==a15);
    Node<int,int>* a16= a.add(16,2);
    assert (a.find_next_up(a15)==a16);
    Node<int,int>* a17= a.add(17,2);
    assert (a.find_next_up(a16)==a17);
    Node<int,int>* a18= a.add(18,2);
    assert (a.find_next_up(a17)==a18);
    Node<int,int>* a19= a.add(19,2);
    assert (a.find_next_up(a18)==a19);
    Node<int,int>* a20= a.add(20,2);
    assert (a.find_next_up(a19)==a20);
    Node<int,int>* a21= a.add(21,2);
    assert (a.find_next_up(a20)==a21);
    Node<int,int>* a22= a.add(22,2);
    assert (a.find_next_up(a21)==a22);
    Node<int,int>* a23= a.add(23,2);
    assert (a.find_next_up(a22)==a23);
    Node<int,int>* a24= a.add(24,2);
    assert (a.find_next_up(a23)==a24);
    Node<int,int>* a25= a.add(25,2);
    assert (a.find_next_up(a24)==a25);
    Node<int,int>* a26= a.add(26,2);
    assert (a.find_next_up(a25)==a26);
    Node<int,int>* a27= a.add(27,2);
    assert (a.find_next_up(a26)==a27);
    Node<int,int>* a28= a.add(28,2);
    assert (a.find_next_up(a27)==a28);
    Node<int,int>* a29= a.add(29,2);
    assert (a.find_next_up(a28)==a29);
    Node<int,int>* a30= a.add(30,2);
    assert (a.find_next_up(a29)==a30);
    Node<int,int>* a31= a.add(31,2);
    assert (a.find_next_up(a30)==a31);
    Node<int,int>* a32= a.add(32,2);
    assert (a.find_next_up(a31)==a32);
    Node<int,int>* a33= a.add(33,2);
    assert (a.find_next_up(a32)==a33);
    Node<int,int>* a34= a.add(34,2);
    assert (a.find_next_up(a33)==a34);
    Node<int,int>* a35= a.add(35,2);
    assert (a.find_next_up(a34)==a35);
    Node<int,int>* a36= a.add(36,2);
    assert (a.find_next_up(a35)==a36);
    Node<int,int>* a37= a.add(37,2);
    assert (a.find_next_up(a36)==a37);
    Node<int,int>* a38= a.add(38,2);
    assert (a.find_next_up(a37)==a38);
    Node<int,int>* a39= a.add(39,2);
    assert (a.find_next_up(a38)==a39);
    Node<int,int>* a40= a.add(40,2);
    assert (a.find_next_up(a39)==a40);
    Node<int,int>* a41= a.add(41,2);
    assert (a.find_next_up(a40)==a41);
    Node<int,int>* a42= a.add(42,2);
    assert (a.find_next_up(a41)==a42);
    Node<int,int>* a43= a.add(43,2);
    assert (a.find_next_up(a42)==a43);
    Node<int,int>* a44= a.add(44,2);
    assert (a.find_next_up(a43)==a44);
    Node<int,int>* a45= a.add(45,2);
    assert (a.find_next_up(a44)==a45);
    Node<int,int>* a46= a.add(46,2);
    assert (a.find_next_up(a45)==a46);
    Node<int,int>* a47= a.add(47,2);
    assert (a.find_next_up(a46)==a47);
    Node<int,int>* a48= a.add(48,2);
    assert (a.find_next_up(a47)==a48);
    Node<int,int>* a49= a.add(49,2);
    assert (a.find_next_up(a48)==a49);
    Node<int,int>* a50= a.add(50,2);
    assert (a.find_next_up(a49)==a50);
    Node<int,int>* a51= a.add(51,2);
    assert (a.find_next_up(a50)==a51);
    Node<int,int>* a52= a.add(52,2);
    assert (a.find_next_up(a51)==a52);
    Node<int,int>* a53= a.add(53,2);
    assert (a.find_next_up(a52)==a53);
    Node<int,int>* a54= a.add(54,2);
    assert (a.find_next_up(a53)==a54);
    Node<int,int>* a55= a.add(55,2);
    assert (a.find_next_up(a54)==a55);
    Node<int,int>* a56= a.add(56,2);
    assert (a.find_next_up(a55)==a56);
    Node<int,int>* a57= a.add(57,2);
    assert (a.find_next_up(a56)==a57);
    Node<int,int>* a58= a.add(58,2);
    assert (a.find_next_up(a57)==a58);
    Node<int,int>* a59= a.add(59,2);
    assert (a.find_next_up(a58)==a59);
    Node<int,int>* a60= a.add(60,2);
    assert (a.find_next_up(a59)==a60);
    Node<int,int>* a61= a.add(61,2);
    assert (a.find_next_up(a60)==a61);
    Node<int,int>* a62= a.add(62,2);
    assert (a.find_next_up(a61)==a62);
    Node<int,int>* a63= a.add(63,2);
    assert (a.find_next_up(a62)==a63);
    Node<int,int>* a64= a.add(64,2);
    assert (a.find_next_up(a63)==a64);
    Node<int,int>* a65= a.add(65,2);
    assert (a.find_next_up(a64)==a65);
    Node<int,int>* a66= a.add(66,2);
    assert (a.find_next_up(a65)==a66);
    Node<int,int>* a67= a.add(67,2);
    assert (a.find_next_up(a66)==a67);
    Node<int,int>* a68= a.add(68,2);
    assert (a.find_next_up(a67)==a68);
    Node<int,int>* a69= a.add(69,2);
    assert (a.find_next_up(a68)==a69);
    Node<int,int>* a70= a.add(70,2);
    assert (a.find_next_up(a69)==a70);
    Node<int,int>* a71= a.add(71,2);
    assert (a.find_next_up(a70)==a71);
    Node<int,int>* a72= a.add(72,2);
    assert (a.find_next_up(a71)==a72);
    Node<int,int>* a73= a.add(73,2);
    assert (a.find_next_up(a72)==a73);
    Node<int,int>* a74= a.add(74,2);
    assert (a.find_next_up(a73)==a74);
    Node<int,int>* a75= a.add(75,2);
    assert (a.find_next_up(a74)==a75);
    Node<int,int>* a76= a.add(76,2);
    assert (a.find_next_up(a75)==a76);
    Node<int,int>* a77= a.add(77,2);
    assert (a.find_next_up(a76)==a77);
    Node<int,int>* a78= a.add(78,2);
    assert (a.find_next_up(a77)==a78);
    Node<int,int>* a79= a.add(79,2);
    assert (a.find_next_up(a78)==a79);
    Node<int,int>* a80= a.add(80,2);
    assert (a.find_next_up(a79)==a80);
    Node<int,int>* a81= a.add(81,2);
    assert (a.find_next_up(a80)==a81);
    Node<int,int>* a82= a.add(82,2);
    assert (a.find_next_up(a81)==a82);
    Node<int,int>* a83= a.add(83,2);
    assert (a.find_next_up(a82)==a83);
    Node<int,int>* a84= a.add(84,2);
    assert (a.find_next_up(a83)==a84);
    Node<int,int>* a85= a.add(85,2);
    assert (a.find_next_up(a84)==a85);
    Node<int,int>* a86= a.add(86,2);
    assert (a.find_next_up(a85)==a86);
    Node<int,int>* a87= a.add(87,2);
    assert (a.find_next_up(a86)==a87);
    Node<int,int>* a88= a.add(88,2);
    assert (a.find_next_up(a87)==a88);
    Node<int,int>* a89= a.add(89,2);
    assert (a.find_next_up(a88)==a89);
    Node<int,int>* a90= a.add(90,2);
    assert (a.find_next_up(a89)==a90);
    Node<int,int>* a91= a.add(91,2);
    assert (a.find_next_up(a90)==a91);
    Node<int,int>* a92= a.add(92,2);
    assert (a.find_next_up(a91)==a92);
    Node<int,int>* a93= a.add(93,2);
    assert (a.find_next_up(a92)==a93);
    Node<int,int>* a94= a.add(94,2);
    assert (a.find_next_up(a93)==a94);
    Node<int,int>* a95= a.add(95,2);
    assert (a.find_next_up(a94)==a95);
    Node<int,int>* a96= a.add(96,2);
    assert (a.find_next_up(a95)==a96);
    Node<int,int>* a97= a.add(97,2);
    assert (a.find_next_up(a96)==a97);
    Node<int,int>* a98= a.add(98,2);
    assert (a.find_next_up(a97)==a98);
    Node<int,int>* a99= a.add(99,2);
    assert (a.find_next_up(a98)==a99);
    Node<int,int>* a100= a.add(100,2);
    assert (a.find_next_up(a99)==a100);
    Node<int,int>* a101= a.add(101,2);
    assert (a.find_next_up(a100)==a101);
    Node<int,int>* a102= a.add(102,2);
    assert (a.find_next_up(a101)==a102);
    Node<int,int>* a103= a.add(103,2);
    assert (a.find_next_up(a102)==a103);
    Node<int,int>* a104= a.add(104,2);
    assert (a.find_next_up(a103)==a104);
    Node<int,int>* a105= a.add(105,2);
    assert (a.find_next_up(a104)==a105);
    Node<int,int>* a106= a.add(106,2);
    assert (a.find_next_up(a105)==a106);
    Node<int,int>* a107= a.add(107,2);
    assert (a.find_next_up(a106)==a107);
    Node<int,int>* a108= a.add(108,2);
    assert (a.find_next_up(a107)==a108);
    Node<int,int>* a109= a.add(109,2);
    assert (a.find_next_up(a108)==a109);
    Node<int,int>* a110= a.add(110,2);
    assert (a.find_next_up(a109)==a110);
    Node<int,int>* a111= a.add(111,2);
    assert (a.find_next_up(a110)==a111);
    Node<int,int>* a112= a.add(112,2);
    assert (a.find_next_up(a111)==a112);
    Node<int,int>* a113= a.add(113,2);
    assert (a.find_next_up(a112)==a113);
    Node<int,int>* a114= a.add(114,2);
    assert (a.find_next_up(a113)==a114);
    Node<int,int>* a115= a.add(115,2);
    assert (a.find_next_up(a114)==a115);
    Node<int,int>* a116= a.add(116,2);
    assert (a.find_next_up(a115)==a116);
    Node<int,int>* a117= a.add(117,2);
    assert (a.find_next_up(a116)==a117);
    Node<int,int>* a118= a.add(118,2);
    assert (a.find_next_up(a117)==a118);
    Node<int,int>* a119= a.add(119,2);
    assert (a.find_next_up(a118)==a119);
    Node<int,int>* a120= a.add(120,2);
    assert (a.find_next_up(a119)==a120);
    Node<int,int>* a121= a.add(121,2);
    assert (a.find_next_up(a120)==a121);
    Node<int,int>* a122= a.add(122,2);
    assert (a.find_next_up(a121)==a122);
    Node<int,int>* a123= a.add(123,2);
    assert (a.find_next_up(a122)==a123);
    Node<int,int>* a124= a.add(124,2);
    assert (a.find_next_up(a123)==a124);
    Node<int,int>* a125= a.add(125,2);
    assert (a.find_next_up(a124)==a125);
    Node<int,int>* a126= a.add(126,2);
    assert (a.find_next_up(a125)==a126);
    Node<int,int>* a127= a.add(127,2);
    assert (a.find_next_up(a126)==a127);
    Node<int,int>* a128= a.add(128,2);
    assert (a.find_next_up(a127)==a128);
    Node<int,int>* a129= a.add(129,2);
    assert (a.find_next_up(a128)==a129);
    Node<int,int>* a130= a.add(130,2);
    assert (a.find_next_up(a129)==a130);
    Node<int,int>* a131= a.add(131,2);
    assert (a.find_next_up(a130)==a131);
    Node<int,int>* a132= a.add(132,2);
    assert (a.find_next_up(a131)==a132);
    Node<int,int>* a133= a.add(133,2);
    assert (a.find_next_up(a132)==a133);
    Node<int,int>* a134= a.add(134,2);
    assert (a.find_next_up(a133)==a134);
    Node<int,int>* a135= a.add(135,2);
    assert (a.find_next_up(a134)==a135);
    Node<int,int>* a136= a.add(136,2);
    assert (a.find_next_up(a135)==a136);
    Node<int,int>* a137= a.add(137,2);
    assert (a.find_next_up(a136)==a137);
    Node<int,int>* a138= a.add(138,2);
    assert (a.find_next_up(a137)==a138);
    Node<int,int>* a139= a.add(139,2);
    assert (a.find_next_up(a138)==a139);
    Node<int,int>* a140= a.add(140,2);
    assert (a.find_next_up(a139)==a140);
    Node<int,int>* a141= a.add(141,2);
    assert (a.find_next_up(a140)==a141);
    Node<int,int>* a142= a.add(142,2);
    assert (a.find_next_up(a141)==a142);
    Node<int,int>* a143= a.add(143,2);
    assert (a.find_next_up(a142)==a143);
    Node<int,int>* a144= a.add(144,2);
    assert (a.find_next_up(a143)==a144);
    Node<int,int>* a145= a.add(145,2);
    assert (a.find_next_up(a144)==a145);
    Node<int,int>* a146= a.add(146,2);
    assert (a.find_next_up(a145)==a146);
    Node<int,int>* a147= a.add(147,2);
    assert (a.find_next_up(a146)==a147);
    Node<int,int>* a148= a.add(148,2);
    assert (a.find_next_up(a147)==a148);
    Node<int,int>* a149= a.add(149,2);
    assert (a.find_next_up(a148)==a149);
    Node<int,int>* a150= a.add(150,2);
    assert (a.find_next_up(a149)==a150);
    Node<int,int>* a151= a.add(151,2);
    assert (a.find_next_up(a150)==a151);
    Node<int,int>* a152= a.add(152,2);
    assert (a.find_next_up(a151)==a152);
    Node<int,int>* a153= a.add(153,2);
    assert (a.find_next_up(a152)==a153);
    Node<int,int>* a154= a.add(154,2);
    assert (a.find_next_up(a153)==a154);
    Node<int,int>* a155= a.add(155,2);
    assert (a.find_next_up(a154)==a155);
    Node<int,int>* a156= a.add(156,2);
    assert (a.find_next_up(a155)==a156);
    Node<int,int>* a157= a.add(157,2);
    assert (a.find_next_up(a156)==a157);
    Node<int,int>* a158= a.add(158,2);
    assert (a.find_next_up(a157)==a158);
    Node<int,int>* a159= a.add(159,2);
    assert (a.find_next_up(a158)==a159);
    Node<int,int>* a160= a.add(160,2);
    assert (a.find_next_up(a159)==a160);
    Node<int,int>* a161= a.add(161,2);
    assert (a.find_next_up(a160)==a161);
    Node<int,int>* a162= a.add(162,2);
    assert (a.find_next_up(a161)==a162);
    Node<int,int>* a163= a.add(163,2);
    assert (a.find_next_up(a162)==a163);
    Node<int,int>* a164= a.add(164,2);
    assert (a.find_next_up(a163)==a164);
    Node<int,int>* a165= a.add(165,2);
    assert (a.find_next_up(a164)==a165);
    Node<int,int>* a166= a.add(166,2);
    assert (a.find_next_up(a165)==a166);
    Node<int,int>* a167= a.add(167,2);
    assert (a.find_next_up(a166)==a167);
    Node<int,int>* a168= a.add(168,2);
    assert (a.find_next_up(a167)==a168);
    Node<int,int>* a169= a.add(169,2);
    assert (a.find_next_up(a168)==a169);
    Node<int,int>* a170= a.add(170,2);
    assert (a.find_next_up(a169)==a170);
    Node<int,int>* a171= a.add(171,2);
    assert (a.find_next_up(a170)==a171);
    Node<int,int>* a172= a.add(172,2);
    assert (a.find_next_up(a171)==a172);
    Node<int,int>* a173= a.add(173,2);
    assert (a.find_next_up(a172)==a173);
    Node<int,int>* a174= a.add(174,2);
    assert (a.find_next_up(a173)==a174);
    Node<int,int>* a175= a.add(175,2);
    assert (a.find_next_up(a174)==a175);
    Node<int,int>* a176= a.add(176,2);
    assert (a.find_next_up(a175)==a176);
    Node<int,int>* a177= a.add(177,2);
    assert (a.find_next_up(a176)==a177);
    Node<int,int>* a178= a.add(178,2);
    assert (a.find_next_up(a177)==a178);
    Node<int,int>* a179= a.add(179,2);
    assert (a.find_next_up(a178)==a179);
    a.remove_by_key(178);
    assert (a.find_next_up(a177)==a179);
    Node<int,int>* a180= a.add(180,2);
    assert (a.find_next_up(a179)==a180);
    Node<int,int>* a181= a.add(181,2);
    assert (a.find_next_up(a180)==a181);
    Node<int,int>* a182= a.add(182,2);
    assert (a.find_next_up(a181)==a182);
    Node<int,int>* a183= a.add(183,2);
    assert (a.find_next_up(a182)==a183);
    Node<int,int>* a184= a.add(184,2);
    assert (a.find_next_up(a183)==a184);
    Node<int,int>* a185= a.add(185,2);
    assert (a.find_next_up(a184)==a185);
    Node<int,int>* a186= a.add(186,2);
    assert (a.find_next_up(a185)==a186);
    Node<int,int>* a187= a.add(187,2);
    assert (a.find_next_up(a186)==a187);
    Node<int,int>* a188= a.add(188,2);
    assert (a.find_next_up(a187)==a188);
    Node<int,int>* a189= a.add(189,2);
    assert (a.find_next_up(a188)==a189);
    Node<int,int>* a190= a.add(190,2);
    assert (a.find_next_up(a189)==a190);
    Node<int,int>* a191= a.add(191,2);
    assert (a.find_next_up(a190)==a191);
    Node<int,int>* a192= a.add(192,2);
    assert (a.find_next_up(a191)==a192);
    Node<int,int>* a193= a.add(193,2);
    assert (a.find_next_up(a192)==a193);
    Node<int,int>* a194= a.add(194,2);
    assert (a.find_next_up(a193)==a194);
    Node<int,int>* a195= a.add(195,2);
    assert (a.find_next_up(a194)==a195);
    Node<int,int>* a196= a.add(196,2);
    assert (a.find_next_up(a195)==a196);
    Node<int,int>* a197= a.add(197,2);
    assert (a.find_next_up(a196)==a197);
    Node<int,int>* a198= a.add(198,2);
    assert (a.find_next_up(a197)==a198);
    Node<int,int>* a199= a.add(199,2);
    assert (a.find_next_up(a198)==a199);
    Node<int,int>* a200= a.add(200,2);
    assert (a.find_next_up(a199)==a200);
    Node<int,int>* a201= a.add(201,2);
    assert (a.find_next_up(a200)==a201);
    Node<int,int>* a202= a.add(202,2);
    assert (a.find_next_up(a201)==a202);
    Node<int,int>* a203= a.add(203,2);
    assert (a.find_next_up(a202)==a203);
    Node<int,int>* a204= a.add(204,2);
    assert (a.find_next_up(a203)==a204);
    Node<int,int>* a205= a.add(205,2);
    assert (a.find_next_up(a204)==a205);
    Node<int,int>* a206= a.add(206,2);
    assert (a.find_next_up(a205)==a206);
    Node<int,int>* a207= a.add(207,2);
    assert (a.find_next_up(a206)==a207);
    Node<int,int>* a208= a.add(208,2);
    assert (a.find_next_up(a207)==a208);
    Node<int,int>* a209= a.add(209,2);
    assert (a.find_next_up(a208)==a209);
    Node<int,int>* a210= a.add(210,2);
    assert (a.find_next_up(a209)==a210);
    Node<int,int>* a211= a.add(211,2);
    assert (a.find_next_up(a210)==a211);
    Node<int,int>* a212= a.add(212,2);
    assert (a.find_next_up(a211)==a212);
    Node<int,int>* a213= a.add(213,2);
    assert (a.find_next_up(a212)==a213);
    Node<int,int>* a214= a.add(214,2);
    assert (a.find_next_up(a213)==a214);
    Node<int,int>* a215= a.add(215,2);
    assert (a.find_next_up(a214)==a215);
    Node<int,int>* a216= a.add(216,2);
    assert (a.find_next_up(a215)==a216);
    Node<int,int>* a217= a.add(217,2);
    assert (a.find_next_up(a216)==a217);
    Node<int,int>* a218= a.add(218,2);
    assert (a.find_next_up(a217)==a218);
    Node<int,int>* a219= a.add(219,2);
    assert (a.find_next_up(a218)==a219);
    Node<int,int>* a220= a.add(220,2);
    assert (a.find_next_up(a219)==a220);
    Node<int,int>* a221= a.add(221,2);
    assert (a.find_next_up(a220)==a221);
    Node<int,int>* a222= a.add(222,2);
    assert (a.find_next_up(a221)==a222);
    Node<int,int>* a223= a.add(223,2);
    assert (a.find_next_up(a222)==a223);
    Node<int,int>* a224= a.add(224,2);
    assert (a.find_next_up(a223)==a224);
    Node<int,int>* a225= a.add(225,2);
    assert (a.find_next_up(a224)==a225);
    Node<int,int>* a226= a.add(226,2);
    assert (a.find_next_up(a225)==a226);
    Node<int,int>* a227= a.add(227,2);
    assert (a.find_next_up(a226)==a227);
    Node<int,int>* a228= a.add(228,2);
    assert (a.find_next_up(a227)==a228);
    Node<int,int>* a229= a.add(229,2);
    assert (a.find_next_up(a228)==a229);
    Node<int,int>* a230= a.add(230,2);
    assert (a.find_next_up(a229)==a230);
    Node<int,int>* a231= a.add(231,2);
    assert (a.find_next_up(a230)==a231);
    Node<int,int>* a232= a.add(232,2);
    assert (a.find_next_up(a231)==a232);
    Node<int,int>* a233= a.add(233,2);
    assert (a.find_next_up(a232)==a233);
    Node<int,int>* a234= a.add(234,2);
    assert (a.find_next_up(a233)==a234);
    Node<int,int>* a235= a.add(235,2);
    assert (a.find_next_up(a234)==a235);
    Node<int,int>* a236= a.add(236,2);
    assert (a.find_next_up(a235)==a236);
    Node<int,int>* a237= a.add(237,2);
    assert (a.find_next_up(a236)==a237);
    Node<int,int>* a238= a.add(238,2);
    assert (a.find_next_up(a237)==a238);
    Node<int,int>* a239= a.add(239,2);
    assert (a.find_next_up(a238)==a239);
    Node<int,int>* a240= a.add(240,2);
    assert (a.find_next_up(a239)==a240);
    Node<int,int>* a241= a.add(241,2);
    assert (a.find_next_up(a240)==a241);
    Node<int,int>* a242= a.add(242,2);
    assert (a.find_next_up(a241)==a242);
    Node<int,int>* a243= a.add(243,2);
    assert (a.find_next_up(a242)==a243);
    Node<int,int>* a244= a.add(244,2);
    assert (a.find_next_up(a243)==a244);
    Node<int,int>* a245= a.add(245,2);
    assert (a.find_next_up(a244)==a245);
    Node<int,int>* a246= a.add(246,2);
    assert (a.find_next_up(a245)==a246);
    Node<int,int>* a247= a.add(247,2);
    assert (a.find_next_up(a246)==a247);
    Node<int,int>* a248= a.add(248,2);
    assert (a.find_next_up(a247)==a248);
    Node<int,int>* a249= a.add(249,2);
    assert (a.find_next_up(a248)==a249);
    Node<int,int>* a250= a.add(250,2);
    assert (a.find_next_up(a249)==a250);
    Node<int,int>* a251= a.add(251,2);
    assert (a.find_next_up(a250)==a251);
    Node<int,int>* a252= a.add(252,2);
    assert (a.find_next_up(a251)==a252);
    Node<int,int>* a253= a.add(253,2);
    assert (a.find_next_up(a252)==a253);
    Node<int,int>* a254= a.add(254,2);
    assert (a.find_next_up(a253)==a254);
    Node<int,int>* a255= a.add(255,2);
    assert (a.find_next_up(a254)==a255);
    Node<int,int>* a256= a.add(256,2);
    assert (a.find_next_up(a255)==a256);
    Node<int,int>* a257= a.add(257,2);
    assert (a.find_next_up(a256)==a257);
    Node<int,int>* a258= a.add(258,2);
    assert (a.find_next_up(a257)==a258);
    Node<int,int>* a259= a.add(259,2);
    assert (a.find_next_up(a258)==a259);
    Node<int,int>* a260= a.add(260,2);
    assert (a.find_next_up(a259)==a260);
    Node<int,int>* a261= a.add(261,2);
    assert (a.find_next_up(a260)==a261);
    Node<int,int>* a262= a.add(262,2);
    assert (a.find_next_up(a261)==a262);
    Node<int,int>* a263= a.add(263,2);
    assert (a.find_next_up(a262)==a263);
    Node<int,int>* a264= a.add(264,2);
    assert (a.find_next_up(a263)==a264);
    Node<int,int>* a265= a.add(265,2);
    assert (a.find_next_up(a264)==a265);
    Node<int,int>* a266= a.add(266,2);
    assert (a.find_next_up(a265)==a266);
    Node<int,int>* a267= a.add(267,2);
    assert (a.find_next_up(a266)==a267);
    Node<int,int>* a268= a.add(268,2);
    assert (a.find_next_up(a267)==a268);
    Node<int,int>* a269= a.add(269,2);
    assert (a.find_next_up(a268)==a269);
    Node<int,int>* a270= a.add(270,2);
    assert (a.find_next_up(a269)==a270);
    Node<int,int>* a271= a.add(271,2);
    assert (a.find_next_up(a270)==a271);
    Node<int,int>* a272= a.add(272,2);
    assert (a.find_next_up(a271)==a272);
    Node<int,int>* a273= a.add(273,2);
    assert (a.find_next_up(a272)==a273);
    Node<int,int>* a274= a.add(274,2);
    assert (a.find_next_up(a273)==a274);
    Node<int,int>* a275= a.add(275,2);
    assert (a.find_next_up(a274)==a275);
    Node<int,int>* a276= a.add(276,2);
    assert (a.find_next_up(a275)==a276);
    Node<int,int>* a277= a.add(277,2);
    assert (a.find_next_up(a276)==a277);
    Node<int,int>* a278= a.add(278,2);
    assert (a.find_next_up(a277)==a278);
    Node<int,int>* a279= a.add(279,2);
    assert (a.find_next_up(a278)==a279);
    Node<int,int>* a280= a.add(280,2);
    assert (a.find_next_up(a279)==a280);
    Node<int,int>* a281= a.add(281,2);
    assert (a.find_next_up(a280)==a281);
    Node<int,int>* a282= a.add(282,2);
    assert (a.find_next_up(a281)==a282);
    Node<int,int>* a283= a.add(283,2);
    assert (a.find_next_up(a282)==a283);
    Node<int,int>* a284= a.add(284,2);
    assert (a.find_next_up(a283)==a284);
    Node<int,int>* a285= a.add(285,2);
    assert (a.find_next_up(a284)==a285);
    Node<int,int>* a286= a.add(286,2);
    assert (a.find_next_up(a285)==a286);
    Node<int,int>* a287= a.add(287,2);
    assert (a.find_next_up(a286)==a287);
    Node<int,int>* a288= a.add(288,2);
    assert (a.find_next_up(a287)==a288);
    Node<int,int>* a289= a.add(289,2);
    assert (a.find_next_up(a288)==a289);
    Node<int,int>* a290= a.add(290,2);
    assert (a.find_next_up(a289)==a290);
    Node<int,int>* a291= a.add(291,2);
    assert (a.find_next_up(a290)==a291);
    Node<int,int>* a292= a.add(292,2);
    assert (a.find_next_up(a291)==a292);
    Node<int,int>* a293= a.add(293,2);
    assert (a.find_next_up(a292)==a293);
    Node<int,int>* a294= a.add(294,2);
    assert (a.find_next_up(a293)==a294);
    Node<int,int>* a295= a.add(295,2);
    assert (a.find_next_up(a294)==a295);
    Node<int,int>* a296= a.add(296,2);
    assert (a.find_next_up(a295)==a296);
    Node<int,int>* a297= a.add(297,2);
    assert (a.find_next_up(a296)==a297);
    Node<int,int>* a298= a.add(298,2);
    assert (a.find_next_up(a297)==a298);
    Node<int,int>* a299= a.add(299,2);
//    assert (a.find_next_up(a298)==a299);
//    a.add(31,2);
//    printBT(a.root);
//    a.remove_by_key(16);
//    printBT(a.root);
//    a.remove_by_key(17);
//    printBT(a.root);
//    a.add(32,2);
//    a.add(33,2);
//    a.add(34,2);
//    a.add(35,2);
//    a.add(36,2);
//    a.add(37,2);
//    a.add(38,2);
//    a.add(39,2);
//    a.add(40,2);
//    a.add(41,2);
//    a.add(42,2);
//    printBT(a.root);
//    a.remove_by_key(33);



    printBT(a.root);
////	a.remove_by_key(2);
//    a.add(-1,2);
//    int ix = 0;
//    Key_Value_block<int,int> *array[a.size];
////    a.add(-1,2);
//    test_leakage();
//    std::cout<<res;

//test_insertion_deletion();

//    int n=5;
//    int dummies[n];
//    int dummies_keys[n];
//    for (int i=0;i<n;i++){ dummies[i]=0;}
//    for (int i=0;i<n;i++){ dummies_keys[i]=0;}
//    AVLTree<dummy,dummy> del_tree;
//    for (int i=0;i<n;i++){
//
//        del_tree.add(dummy(&dummies_keys[i], i),dummy(&dummies[i], i));
//    }
//    del_tree.remove_by_key(dummy(&dummies_keys[2], 2));
//    assert (dummies[2]==0);
////    dummy d(&dummies[2], 2);
//    del_tree.add(2,d);
//    for (int i=0;i<n;i++){
//        del_tree.remove_by_key(i);
//        assert (dummies[i]==true);
//    }

}
